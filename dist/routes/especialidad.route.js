"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const collections_constants_1 = require("./../constants/collections.constants");
const express_1 = require("express");
const database = require("../database/database");
const mongodb_1 = require("mongodb");
const _ = require("underscore");
class EspecialidadRouter {
    /**
     * Initialize the EspecialidadesRouter
     */
    constructor() {
        this.router = express_1.Router();
        this.init();
    }
    /**
     * GET all Especialidades.
     */
    getAll(req, res, next) {
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION).find({}).toArray((err, especialidades) => {
            if (err)
                throw err;
            res.json(especialidades);
        });
    }
    /**
     * ADD new Especialidad.
     */
    createOne(req, res, next) {
        let auditoriaInfo = { fechaAlta: new Date(), fechaModificacion: null };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION).insert(entity, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.ops[0]);
        });
    }
    /**
    * GET single Especialidad.
    */
    getOne(req, res, next) {
        console.log(req.params.id);
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION)
            .findOne({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, (err, especialidad) => {
            if (err)
                throw err;
            res.json(especialidad);
        });
    }
    /**
     * UPDATE single Especialidad.
     */
    updateOne(req, res, next) {
        //when updating we need to remove the id property of the object in order to make it inmutable
        let auditoriaInfo = { fechaModificacion: new Date() };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION)
            .findOneAndUpdate({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, { $set: entity }, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.value);
        });
    }
    /**
     * Take each handler, and attach to one of the Express.Router's
     * endpoints.
     */
    init() {
        this.router.get('/', this.getAll);
        this.router.get('/:id', this.getOne);
        this.router.post('/', this.createOne);
        this.router.post('/:id', this.updateOne);
        //TODO this.router.post('/:id', this.getOne);
    }
}
exports.EspecialidadRouter = EspecialidadRouter;
// Create the HeroRouter, and export its configured Express.Router
const especialidadRouter = new EspecialidadRouter();
especialidadRouter.init();
exports.default = especialidadRouter.router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvZXNwZWNpYWxpZGFkLnJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsZ0ZBQWlGO0FBQ2pGLHFDQUFnRTtBQUNoRSxpREFBaUQ7QUFDakQscUNBQWlDO0FBQ2pDLGdDQUFnQztBQUVoQztJQUdFOztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFNLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtRQUMzRCxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLGlEQUF5QixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBQyxjQUFtQztZQUM5RyxFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUM7Z0JBQ0wsTUFBTSxHQUFHLENBQUM7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUVEOztPQUVHO0lBQ0ksU0FBUyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDaEUsSUFBSSxhQUFhLEdBQUcsRUFBQyxTQUFTLEVBQUMsSUFBSSxJQUFJLEVBQUUsRUFBQyxpQkFBaUIsRUFBQyxJQUFJLEVBQUMsQ0FBQztRQUNsRSxJQUFJLE1BQU0sR0FBaUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsaURBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFDLENBQUMsR0FBRyxFQUFDLE1BQU07WUFDNUUsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFDSixNQUFNLEdBQUcsQ0FBQztZQUNkLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFnQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDO0lBRUE7O01BRUU7SUFDSSxNQUFNLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtRQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0IsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxpREFBeUIsQ0FBQzthQUNuRCxPQUFPLENBQUMsRUFBQyxHQUFHLEVBQUMsa0JBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsWUFBMEI7WUFDMUYsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDO2dCQUNMLE1BQU0sR0FBRyxDQUFDO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFJRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQzlELDZGQUE2RjtRQUM3RixJQUFJLGFBQWEsR0FBRyxFQUFDLGlCQUFpQixFQUFDLElBQUksSUFBSSxFQUFFLEVBQUMsQ0FBQztRQUNuRCxJQUFJLE1BQU0sR0FBaUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xGLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsaURBQXlCLENBQUM7YUFDbkQsZ0JBQWdCLENBQUMsRUFBQyxHQUFHLEVBQUMsa0JBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsTUFBTTtZQUMzRixFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO2dCQUNKLE1BQU0sR0FBRyxDQUFDO1lBQ2QsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQWdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6Qyw2Q0FBNkM7SUFFL0MsQ0FBQztDQUVGO0FBcEZELGdEQW9GQztBQUVELGtFQUFrRTtBQUNsRSxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUNwRCxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUUxQixrQkFBZSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMiLCJmaWxlIjoicm91dGVzL2VzcGVjaWFsaWRhZC5yb3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElFc3BlY2lhbGlkYWQgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMvZXNwZWNpYWxpZGFkLmludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBFU1BFQ0lBTElEQURFU19DT0xMRUNUSU9OIH0gZnJvbSAnLi8uLi9jb25zdGFudHMvY29sbGVjdGlvbnMuY29uc3RhbnRzJztcclxuaW1wb3J0IHtSb3V0ZXIsIFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb259IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBkYXRhYmFzZSBmcm9tIFwiLi4vZGF0YWJhc2UvZGF0YWJhc2VcIjtcclxuaW1wb3J0IHtPYmplY3RJRH0gZnJvbSBcIm1vbmdvZGJcIjtcclxuaW1wb3J0ICogYXMgXyBmcm9tIFwidW5kZXJzY29yZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVzcGVjaWFsaWRhZFJvdXRlciB7XHJcbiAgcHVibGljIHJvdXRlcjogUm91dGVyXHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIEVzcGVjaWFsaWRhZGVzUm91dGVyXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnJvdXRlciA9IFJvdXRlcigpO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHRVQgYWxsIEVzcGVjaWFsaWRhZGVzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbGwocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICAgIGRhdGFiYXNlLmdldERCKCkuY29sbGVjdGlvbihFU1BFQ0lBTElEQURFU19DT0xMRUNUSU9OKS5maW5kKHt9KS50b0FycmF5KChlcnIsZXNwZWNpYWxpZGFkZXM6QXJyYXk8SUVzcGVjaWFsaWRhZD4pPT57XHJcbiAgICAgIGlmKGVycilcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgIHJlcy5qc29uKGVzcGVjaWFsaWRhZGVzKTtcclxuICAgIH0pOyAgXHJcbiAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFERCBuZXcgRXNwZWNpYWxpZGFkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGVPbmUocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICBsZXQgYXVkaXRvcmlhSW5mbyA9IHtmZWNoYUFsdGE6bmV3IERhdGUoKSxmZWNoYU1vZGlmaWNhY2lvbjpudWxsfTtcclxuICBsZXQgZW50aXR5OklFc3BlY2lhbGlkYWQgPSBPYmplY3QuYXNzaWduKHt9LF8ub21pdChyZXEuYm9keSwnX2lkJyksYXVkaXRvcmlhSW5mbyk7XHJcbiAgICBkYXRhYmFzZS5nZXREQigpLmNvbGxlY3Rpb24oRVNQRUNJQUxJREFERVNfQ09MTEVDVElPTikuaW5zZXJ0KGVudGl0eSwoZXJyLHJlc3VsdCk9PntcclxuICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcy5zZW5kKDxJRXNwZWNpYWxpZGFkPnJlc3VsdC5vcHNbMF0pO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgIC8qKlxyXG4gICAqIEdFVCBzaW5nbGUgRXNwZWNpYWxpZGFkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPbmUocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICAgIGNvbnNvbGUubG9nKHJlcS5wYXJhbXMuaWQpO1xyXG4gICAgZGF0YWJhc2UuZ2V0REIoKS5jb2xsZWN0aW9uKEVTUEVDSUFMSURBREVTX0NPTExFQ1RJT04pXHJcbiAgICAgIC5maW5kT25lKHtfaWQ6T2JqZWN0SUQuY3JlYXRlRnJvbUhleFN0cmluZyhyZXEucGFyYW1zLmlkKX0sKGVycixlc3BlY2lhbGlkYWQ6SUVzcGVjaWFsaWRhZCk9PntcclxuICAgICAgaWYoZXJyKVxyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgICAgcmVzLmpzb24oZXNwZWNpYWxpZGFkKTtcclxuICAgIH0pOyAgXHJcbiAgICBcclxuICB9XHJcblxyXG4gIFxyXG5cclxuICAvKipcclxuICAgKiBVUERBVEUgc2luZ2xlIEVzcGVjaWFsaWRhZC5cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlT25lKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcbiAgICAvL3doZW4gdXBkYXRpbmcgd2UgbmVlZCB0byByZW1vdmUgdGhlIGlkIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaW4gb3JkZXIgdG8gbWFrZSBpdCBpbm11dGFibGVcclxuICAgIGxldCBhdWRpdG9yaWFJbmZvID0ge2ZlY2hhTW9kaWZpY2FjaW9uOm5ldyBEYXRlKCl9O1xyXG4gICAgbGV0IGVudGl0eTpJRXNwZWNpYWxpZGFkID0gT2JqZWN0LmFzc2lnbih7fSxfLm9taXQocmVxLmJvZHksJ19pZCcpLGF1ZGl0b3JpYUluZm8pO1xyXG4gICAgZGF0YWJhc2UuZ2V0REIoKS5jb2xsZWN0aW9uKEVTUEVDSUFMSURBREVTX0NPTExFQ1RJT04pXHJcbiAgICAgIC5maW5kT25lQW5kVXBkYXRlKHtfaWQ6T2JqZWN0SUQuY3JlYXRlRnJvbUhleFN0cmluZyhyZXEucGFyYW1zLmlkKX0seyRzZXQ6ZW50aXR5fSwoZXJyLHJlc3VsdCk9PntcclxuICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcy5zZW5kKDxJRXNwZWNpYWxpZGFkPnJlc3VsdC52YWx1ZSk7XHJcbiAgICB9KTsgIFxyXG4gICAgXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUYWtlIGVhY2ggaGFuZGxlciwgYW5kIGF0dGFjaCB0byBvbmUgb2YgdGhlIEV4cHJlc3MuUm91dGVyJ3NcclxuICAgKiBlbmRwb2ludHMuXHJcbiAgICovXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMucm91dGVyLmdldCgnLycsIHRoaXMuZ2V0QWxsKTtcclxuICAgIHRoaXMucm91dGVyLmdldCgnLzppZCcsIHRoaXMuZ2V0T25lKTtcclxuICAgIHRoaXMucm91dGVyLnBvc3QoJy8nLCB0aGlzLmNyZWF0ZU9uZSk7XHJcbiAgICB0aGlzLnJvdXRlci5wb3N0KCcvOmlkJywgdGhpcy51cGRhdGVPbmUpO1xyXG4gICAgLy9UT0RPIHRoaXMucm91dGVyLnBvc3QoJy86aWQnLCB0aGlzLmdldE9uZSk7XHJcbiAgICBcclxuICB9XHJcblxyXG59XHJcblxyXG4vLyBDcmVhdGUgdGhlIEhlcm9Sb3V0ZXIsIGFuZCBleHBvcnQgaXRzIGNvbmZpZ3VyZWQgRXhwcmVzcy5Sb3V0ZXJcclxuY29uc3QgZXNwZWNpYWxpZGFkUm91dGVyID0gbmV3IEVzcGVjaWFsaWRhZFJvdXRlcigpO1xyXG5lc3BlY2lhbGlkYWRSb3V0ZXIuaW5pdCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZXNwZWNpYWxpZGFkUm91dGVyLnJvdXRlcjsiXSwic291cmNlUm9vdCI6Ii4uIn0=
