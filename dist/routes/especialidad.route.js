"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const collections_constants_1 = require("./../constants/collections.constants");
const express_1 = require("express");
const database = require("../database/database");
const mongodb_1 = require("mongodb");
const _ = require("underscore");
class EspecialidadRouter {
    /**
     * Initialize the EspecialidadesRouter
     */
    constructor() {
        this.router = express_1.Router();
        this.init();
    }
    /**
     * GET all Especialidades.
     */
    getAll(req, res, next) {
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION).find({}).toArray((err, especialidades) => {
            if (err)
                throw err;
            res.json(especialidades);
        });
    }
    /**
     * ADD new Especialidad.
     */
    createOne(req, res, next) {
        let auditoriaInfo = { fechaAlta: new Date(), fechaModificacion: null };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION).insert(entity, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.ops[0]);
        });
    }
    /**
    * GET single Especialidad.
    */
    getOne(req, res, next) {
        console.log(req.params.id);
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION)
            .findOne({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, (err, especialidad) => {
            if (err)
                throw err;
            res.json(especialidad);
        });
    }
    /**
     * UPDATE single Especialidad.
     */
    updateOne(req, res, next) {
        //when updating we need to remove the id property of the object in order to make it inmutable
        let auditoriaInfo = { fechaModificacion: new Date() };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection(collections_constants_1.ESPECIALIDADES_COLLECTION)
            .findOneAndUpdate({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, { $set: entity }, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.value);
        });
    }
    /**
     * Take each handler, and attach to one of the Express.Router's
     * endpoints.
     */
    init() {
        this.router.get('/', this.getAll);
        this.router.get('/:id', this.getOne);
        this.router.post('/', this.createOne);
        this.router.post('/:id', this.updateOne);
        //TODO this.router.post('/:id', this.getOne);
    }
}
exports.EspecialidadRouter = EspecialidadRouter;
// Create the HeroRouter, and export its configured Express.Router
const especialidadRouter = new EspecialidadRouter();
especialidadRouter.init();
exports.default = especialidadRouter.router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvZXNwZWNpYWxpZGFkLnJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsZ0ZBQWlGO0FBQ2pGLHFDQUFnRTtBQUNoRSxpREFBaUQ7QUFDakQscUNBQWlDO0FBQ2pDLGdDQUFnQztBQUVoQztJQUdFOztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsTUFBTSxHQUFHLGdCQUFNLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtRQUMzRCxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLGlEQUF5QixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBQyxjQUFtQztZQUM5RyxFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUM7Z0JBQ0wsTUFBTSxHQUFHLENBQUM7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUVEOztPQUVHO0lBQ0ksU0FBUyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDaEUsSUFBSSxhQUFhLEdBQUcsRUFBQyxTQUFTLEVBQUMsSUFBSSxJQUFJLEVBQUUsRUFBQyxpQkFBaUIsRUFBQyxJQUFJLEVBQUMsQ0FBQztRQUNsRSxJQUFJLE1BQU0sR0FBaUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsaURBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFDLENBQUMsR0FBRyxFQUFDLE1BQU07WUFDNUUsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFDSixNQUFNLEdBQUcsQ0FBQztZQUNkLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFnQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDO0lBRUE7O01BRUU7SUFDSSxNQUFNLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtRQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0IsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxpREFBeUIsQ0FBQzthQUNuRCxPQUFPLENBQUMsRUFBQyxHQUFHLEVBQUMsa0JBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsWUFBMEI7WUFDMUYsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDO2dCQUNMLE1BQU0sR0FBRyxDQUFDO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFJRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQzlELDZGQUE2RjtRQUM3RixJQUFJLGFBQWEsR0FBRyxFQUFDLGlCQUFpQixFQUFDLElBQUksSUFBSSxFQUFFLEVBQUMsQ0FBQztRQUNuRCxJQUFJLE1BQU0sR0FBaUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xGLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsaURBQXlCLENBQUM7YUFDbkQsZ0JBQWdCLENBQUMsRUFBQyxHQUFHLEVBQUMsa0JBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsRUFBQyxJQUFJLEVBQUMsTUFBTSxFQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsTUFBTTtZQUMzRixFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDO2dCQUNKLE1BQU0sR0FBRyxDQUFDO1lBQ2QsQ0FBQztZQUNELEdBQUcsQ0FBQyxJQUFJLENBQWdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6Qyw2Q0FBNkM7SUFFL0MsQ0FBQztDQUVGO0FBcEZELGdEQW9GQztBQUVELGtFQUFrRTtBQUNsRSxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQztBQUNwRCxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUUxQixrQkFBZSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMiLCJmaWxlIjoicm91dGVzL2VzcGVjaWFsaWRhZC5yb3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElFc3BlY2lhbGlkYWQgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMvZXNwZWNpYWxpZGFkLmludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBFU1BFQ0lBTElEQURFU19DT0xMRUNUSU9OIH0gZnJvbSAnLi8uLi9jb25zdGFudHMvY29sbGVjdGlvbnMuY29uc3RhbnRzJztcclxuaW1wb3J0IHtSb3V0ZXIsIFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb259IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgKiBhcyBkYXRhYmFzZSBmcm9tIFwiLi4vZGF0YWJhc2UvZGF0YWJhc2VcIjtcclxuaW1wb3J0IHtPYmplY3RJRH0gZnJvbSBcIm1vbmdvZGJcIjtcclxuaW1wb3J0ICogYXMgXyBmcm9tIFwidW5kZXJzY29yZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVzcGVjaWFsaWRhZFJvdXRlciB7XHJcbiAgcm91dGVyOiBSb3V0ZXJcclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgRXNwZWNpYWxpZGFkZXNSb3V0ZXJcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucm91dGVyID0gUm91dGVyKCk7XHJcbiAgICB0aGlzLmluaXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdFVCBhbGwgRXNwZWNpYWxpZGFkZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFsbChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG4gICAgZGF0YWJhc2UuZ2V0REIoKS5jb2xsZWN0aW9uKEVTUEVDSUFMSURBREVTX0NPTExFQ1RJT04pLmZpbmQoe30pLnRvQXJyYXkoKGVycixlc3BlY2lhbGlkYWRlczpBcnJheTxJRXNwZWNpYWxpZGFkPik9PntcclxuICAgICAgaWYoZXJyKVxyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgICAgcmVzLmpzb24oZXNwZWNpYWxpZGFkZXMpO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQUREIG5ldyBFc3BlY2lhbGlkYWQuXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZU9uZShyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG4gIGxldCBhdWRpdG9yaWFJbmZvID0ge2ZlY2hhQWx0YTpuZXcgRGF0ZSgpLGZlY2hhTW9kaWZpY2FjaW9uOm51bGx9O1xyXG4gIGxldCBlbnRpdHk6SUVzcGVjaWFsaWRhZCA9IE9iamVjdC5hc3NpZ24oe30sXy5vbWl0KHJlcS5ib2R5LCdfaWQnKSxhdWRpdG9yaWFJbmZvKTtcclxuICAgIGRhdGFiYXNlLmdldERCKCkuY29sbGVjdGlvbihFU1BFQ0lBTElEQURFU19DT0xMRUNUSU9OKS5pbnNlcnQoZW50aXR5LChlcnIscmVzdWx0KT0+e1xyXG4gICAgICAgIGlmKGVycil7XHJcbiAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzLnNlbmQoPElFc3BlY2lhbGlkYWQ+cmVzdWx0Lm9wc1swXSk7XHJcbiAgICB9KTsgIFxyXG4gICAgXHJcbiAgfVxyXG5cclxuICAgLyoqXHJcbiAgICogR0VUIHNpbmdsZSBFc3BlY2lhbGlkYWQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldE9uZShyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG4gICAgY29uc29sZS5sb2cocmVxLnBhcmFtcy5pZCk7XHJcbiAgICBkYXRhYmFzZS5nZXREQigpLmNvbGxlY3Rpb24oRVNQRUNJQUxJREFERVNfQ09MTEVDVElPTilcclxuICAgICAgLmZpbmRPbmUoe19pZDpPYmplY3RJRC5jcmVhdGVGcm9tSGV4U3RyaW5nKHJlcS5wYXJhbXMuaWQpfSwoZXJyLGVzcGVjaWFsaWRhZDpJRXNwZWNpYWxpZGFkKT0+e1xyXG4gICAgICBpZihlcnIpXHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICByZXMuanNvbihlc3BlY2lhbGlkYWQpO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgXHJcblxyXG4gIC8qKlxyXG4gICAqIFVQREFURSBzaW5nbGUgRXNwZWNpYWxpZGFkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVPbmUocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICAgIC8vd2hlbiB1cGRhdGluZyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgaWQgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBpbiBvcmRlciB0byBtYWtlIGl0IGlubXV0YWJsZVxyXG4gICAgbGV0IGF1ZGl0b3JpYUluZm8gPSB7ZmVjaGFNb2RpZmljYWNpb246bmV3IERhdGUoKX07XHJcbiAgICBsZXQgZW50aXR5OklFc3BlY2lhbGlkYWQgPSBPYmplY3QuYXNzaWduKHt9LF8ub21pdChyZXEuYm9keSwnX2lkJyksYXVkaXRvcmlhSW5mbyk7XHJcbiAgICBkYXRhYmFzZS5nZXREQigpLmNvbGxlY3Rpb24oRVNQRUNJQUxJREFERVNfQ09MTEVDVElPTilcclxuICAgICAgLmZpbmRPbmVBbmRVcGRhdGUoe19pZDpPYmplY3RJRC5jcmVhdGVGcm9tSGV4U3RyaW5nKHJlcS5wYXJhbXMuaWQpfSx7JHNldDplbnRpdHl9LChlcnIscmVzdWx0KT0+e1xyXG4gICAgICAgIGlmKGVycil7XHJcbiAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzLnNlbmQoPElFc3BlY2lhbGlkYWQ+cmVzdWx0LnZhbHVlKTtcclxuICAgIH0pOyAgXHJcbiAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRha2UgZWFjaCBoYW5kbGVyLCBhbmQgYXR0YWNoIHRvIG9uZSBvZiB0aGUgRXhwcmVzcy5Sb3V0ZXInc1xyXG4gICAqIGVuZHBvaW50cy5cclxuICAgKi9cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy5yb3V0ZXIuZ2V0KCcvJywgdGhpcy5nZXRBbGwpO1xyXG4gICAgdGhpcy5yb3V0ZXIuZ2V0KCcvOmlkJywgdGhpcy5nZXRPbmUpO1xyXG4gICAgdGhpcy5yb3V0ZXIucG9zdCgnLycsIHRoaXMuY3JlYXRlT25lKTtcclxuICAgIHRoaXMucm91dGVyLnBvc3QoJy86aWQnLCB0aGlzLnVwZGF0ZU9uZSk7XHJcbiAgICAvL1RPRE8gdGhpcy5yb3V0ZXIucG9zdCgnLzppZCcsIHRoaXMuZ2V0T25lKTtcclxuICAgIFxyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8vIENyZWF0ZSB0aGUgSGVyb1JvdXRlciwgYW5kIGV4cG9ydCBpdHMgY29uZmlndXJlZCBFeHByZXNzLlJvdXRlclxyXG5jb25zdCBlc3BlY2lhbGlkYWRSb3V0ZXIgPSBuZXcgRXNwZWNpYWxpZGFkUm91dGVyKCk7XHJcbmVzcGVjaWFsaWRhZFJvdXRlci5pbml0KCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBlc3BlY2lhbGlkYWRSb3V0ZXIucm91dGVyOyJdLCJzb3VyY2VSb290IjoiLi4ifQ==
