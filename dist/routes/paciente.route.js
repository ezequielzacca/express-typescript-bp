"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const database = require("../database/database");
const mongodb_1 = require("mongodb");
const _ = require("underscore");
class PacientesRouter {
    /**
     * Initialize the PacientesRouter
     */
    constructor() {
        this.router = express_1.Router();
        this.init();
    }
    /**
     * GET all Pacientes.
     */
    getAll(req, res, next) {
        database.getDB().collection('pacientes').find({}).toArray((err, pacientes) => {
            if (err)
                throw err;
            res.json(pacientes);
        });
    }
    /**
     * GET all Pacientes.
     */
    createOne(req, res, next) {
        let auditoriaInfo = { fechaAlta: new Date(), fechaModificacion: null };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection('pacientes').insert(entity, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.ops[0]);
        });
    }
    /**
    * GET single Paciente.
    */
    getOne(req, res, next) {
        console.log(req.params.id);
        database.getDB().collection('pacientes').findOne({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, (err, especialidad) => {
            if (err)
                throw err;
            res.json(especialidad);
        });
    }
    /**
     * UPDATE single Paciente.
     */
    updateOne(req, res, next) {
        //when updating we need to remove the id property of the object in order to make it inmutable
        let auditoriaInfo = { fechaModificacion: new Date() };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection('pacientes').findOneAndUpdate({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, { $set: entity }, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.value);
        });
    }
    /**
     * Take each handler, and attach to one of the Express.Router's
     * endpoints.
     */
    init() {
        this.router.get('/', this.getAll);
        this.router.get('/:id', this.getOne);
        this.router.post('/', this.createOne);
        this.router.post('/:id', this.updateOne);
        //TODO this.router.post('/:id', this.getOne);
    }
}
exports.PacientesRouter = PacientesRouter;
// Create the HeroRouter, and export its configured Express.Router
const pacientesRouter = new PacientesRouter();
pacientesRouter.init();
exports.default = pacientesRouter.router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvcGFjaWVudGUucm91dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBZ0U7QUFDaEUsaURBQWlEO0FBQ2pELHFDQUFpQztBQUNqQyxnQ0FBZ0M7QUFFaEM7SUFHRTs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBTSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDM0QsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFDLFNBQVM7WUFDdEUsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDO2dCQUNMLE1BQU0sR0FBRyxDQUFDO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQ2hFLElBQUksYUFBYSxHQUFHLEVBQUMsU0FBUyxFQUFDLElBQUksSUFBSSxFQUFFLEVBQUMsaUJBQWlCLEVBQUMsSUFBSSxFQUFDLENBQUM7UUFDbEUsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBQyxDQUFDLEdBQUcsRUFBQyxNQUFNO1lBQzlELEVBQUUsQ0FBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUM7Z0JBQ0osTUFBTSxHQUFHLENBQUM7WUFDZCxDQUFDO1lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7SUFFTCxDQUFDO0lBRUE7O01BRUU7SUFDSSxNQUFNLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQjtRQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0IsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBQyxHQUFHLEVBQUMsa0JBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsWUFBWTtZQUNsSCxFQUFFLENBQUEsQ0FBQyxHQUFHLENBQUM7Z0JBQ0wsTUFBTSxHQUFHLENBQUM7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUlEOztPQUVHO0lBQ0ksU0FBUyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDOUQsNkZBQTZGO1FBQzdGLElBQUksYUFBYSxHQUFHLEVBQUMsaUJBQWlCLEVBQUMsSUFBSSxJQUFJLEVBQUUsRUFBQyxDQUFDO1FBQ25ELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBQyxLQUFLLENBQUMsRUFBQyxhQUFhLENBQUMsQ0FBQztRQUNwRSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEVBQUMsR0FBRyxFQUFDLGtCQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxFQUFDLENBQUMsR0FBRyxFQUFDLE1BQU07WUFDakksRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFDSixNQUFNLEdBQUcsQ0FBQztZQUNkLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6Qyw2Q0FBNkM7SUFFL0MsQ0FBQztDQUVGO0FBbEZELDBDQWtGQztBQUVELGtFQUFrRTtBQUNsRSxNQUFNLGVBQWUsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0FBQzlDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUV2QixrQkFBZSxlQUFlLENBQUMsTUFBTSxDQUFDIiwiZmlsZSI6InJvdXRlcy9wYWNpZW50ZS5yb3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9ufSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgZGF0YWJhc2UgZnJvbSBcIi4uL2RhdGFiYXNlL2RhdGFiYXNlXCI7XHJcbmltcG9ydCB7T2JqZWN0SUR9IGZyb20gXCJtb25nb2RiXCI7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSBcInVuZGVyc2NvcmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYWNpZW50ZXNSb3V0ZXIge1xyXG4gIHJvdXRlcjogUm91dGVyXHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIFBhY2llbnRlc1JvdXRlclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yb3V0ZXIgPSBSb3V0ZXIoKTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR0VUIGFsbCBQYWNpZW50ZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldEFsbChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG4gICAgZGF0YWJhc2UuZ2V0REIoKS5jb2xsZWN0aW9uKCdwYWNpZW50ZXMnKS5maW5kKHt9KS50b0FycmF5KChlcnIscGFjaWVudGVzKT0+e1xyXG4gICAgICBpZihlcnIpXHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICByZXMuanNvbihwYWNpZW50ZXMpO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR0VUIGFsbCBQYWNpZW50ZXMuXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZU9uZShyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xyXG4gIGxldCBhdWRpdG9yaWFJbmZvID0ge2ZlY2hhQWx0YTpuZXcgRGF0ZSgpLGZlY2hhTW9kaWZpY2FjaW9uOm51bGx9O1xyXG4gIGxldCBlbnRpdHkgPSBPYmplY3QuYXNzaWduKHt9LF8ub21pdChyZXEuYm9keSwnX2lkJyksYXVkaXRvcmlhSW5mbyk7XHJcbiAgICBkYXRhYmFzZS5nZXREQigpLmNvbGxlY3Rpb24oJ3BhY2llbnRlcycpLmluc2VydChlbnRpdHksKGVycixyZXN1bHQpPT57XHJcbiAgICAgICAgaWYoZXJyKXtcclxuICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXMuc2VuZChyZXN1bHQub3BzWzBdKTtcclxuICAgIH0pOyAgXHJcbiAgICBcclxuICB9XHJcblxyXG4gICAvKipcclxuICAgKiBHRVQgc2luZ2xlIFBhY2llbnRlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRPbmUocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICAgIGNvbnNvbGUubG9nKHJlcS5wYXJhbXMuaWQpO1xyXG4gICAgZGF0YWJhc2UuZ2V0REIoKS5jb2xsZWN0aW9uKCdwYWNpZW50ZXMnKS5maW5kT25lKHtfaWQ6T2JqZWN0SUQuY3JlYXRlRnJvbUhleFN0cmluZyhyZXEucGFyYW1zLmlkKX0sKGVycixlc3BlY2lhbGlkYWQpPT57XHJcbiAgICAgIGlmKGVycilcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgIHJlcy5qc29uKGVzcGVjaWFsaWRhZCk7XHJcbiAgICB9KTsgIFxyXG4gICAgXHJcbiAgfVxyXG5cclxuICBcclxuXHJcbiAgLyoqXHJcbiAgICogVVBEQVRFIHNpbmdsZSBQYWNpZW50ZS5cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlT25lKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcbiAgICAvL3doZW4gdXBkYXRpbmcgd2UgbmVlZCB0byByZW1vdmUgdGhlIGlkIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaW4gb3JkZXIgdG8gbWFrZSBpdCBpbm11dGFibGVcclxuICAgIGxldCBhdWRpdG9yaWFJbmZvID0ge2ZlY2hhTW9kaWZpY2FjaW9uOm5ldyBEYXRlKCl9O1xyXG4gICAgbGV0IGVudGl0eSA9IE9iamVjdC5hc3NpZ24oe30sXy5vbWl0KHJlcS5ib2R5LCdfaWQnKSxhdWRpdG9yaWFJbmZvKTtcclxuICAgIGRhdGFiYXNlLmdldERCKCkuY29sbGVjdGlvbigncGFjaWVudGVzJykuZmluZE9uZUFuZFVwZGF0ZSh7X2lkOk9iamVjdElELmNyZWF0ZUZyb21IZXhTdHJpbmcocmVxLnBhcmFtcy5pZCl9LHskc2V0OmVudGl0eX0sKGVycixyZXN1bHQpPT57XHJcbiAgICAgICAgaWYoZXJyKXtcclxuICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXMuc2VuZChyZXN1bHQudmFsdWUpO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGFrZSBlYWNoIGhhbmRsZXIsIGFuZCBhdHRhY2ggdG8gb25lIG9mIHRoZSBFeHByZXNzLlJvdXRlcidzXHJcbiAgICogZW5kcG9pbnRzLlxyXG4gICAqL1xyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLnJvdXRlci5nZXQoJy8nLCB0aGlzLmdldEFsbCk7XHJcbiAgICB0aGlzLnJvdXRlci5nZXQoJy86aWQnLCB0aGlzLmdldE9uZSk7XHJcbiAgICB0aGlzLnJvdXRlci5wb3N0KCcvJywgdGhpcy5jcmVhdGVPbmUpO1xyXG4gICAgdGhpcy5yb3V0ZXIucG9zdCgnLzppZCcsIHRoaXMudXBkYXRlT25lKTtcclxuICAgIC8vVE9ETyB0aGlzLnJvdXRlci5wb3N0KCcvOmlkJywgdGhpcy5nZXRPbmUpO1xyXG4gICAgXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLy8gQ3JlYXRlIHRoZSBIZXJvUm91dGVyLCBhbmQgZXhwb3J0IGl0cyBjb25maWd1cmVkIEV4cHJlc3MuUm91dGVyXHJcbmNvbnN0IHBhY2llbnRlc1JvdXRlciA9IG5ldyBQYWNpZW50ZXNSb3V0ZXIoKTtcclxucGFjaWVudGVzUm91dGVyLmluaXQoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBhY2llbnRlc1JvdXRlci5yb3V0ZXI7Il0sInNvdXJjZVJvb3QiOiIuLiJ9
