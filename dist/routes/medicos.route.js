"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const collections_constants_1 = require("./../constants/collections.constants");
const express_1 = require("express");
const database = require("../database/database");
const mongodb_1 = require("mongodb");
const _ = require("underscore");
class MedicosRouter {
    /**
     * Initialize the MedicosRouter
     */
    constructor() {
        this.router = express_1.Router();
        this.init();
    }
    /**
     * GET all Medicos.
     */
    getAll(req, res, next) {
        database.getDB().collection(collections_constants_1.MEDICOS_COLLECTION).find({}).toArray((err, medicos) => {
            if (err)
                throw err;
            res.json(medicos);
        });
    }
    /**
     * GET all Medicos.
     */
    createOne(req, res, next) {
        let auditoriaInfo = { fechaAlta: new Date(), fechaModificacion: null };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection(collections_constants_1.MEDICOS_COLLECTION).insert(entity, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.ops[0]);
        });
    }
    /**
    * GET all Medicos.
    */
    getOne(req, res, next) {
        console.log(req.params.id);
        database.getDB().collection(collections_constants_1.MEDICOS_COLLECTION).findOne({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, (err, medico) => {
            if (err)
                throw err;
            res.json(medico);
        });
    }
    /**
     * UPDATE single Medico.
     */
    updateOne(req, res, next) {
        //when updating we need to remove the id property of the object in order to make it inmutable
        let auditoriaInfo = { fechaModificacion: new Date() };
        let entity = Object.assign({}, _.omit(req.body, '_id'), auditoriaInfo);
        database.getDB().collection(collections_constants_1.MEDICOS_COLLECTION).findOneAndUpdate({ _id: mongodb_1.ObjectID.createFromHexString(req.params.id) }, { $set: entity }, (err, result) => {
            if (err) {
                throw err;
            }
            res.send(result.value);
        });
    }
    /**
     * Take each handler, and attach to one of the Express.Router's
     * endpoints.
     */
    init() {
        this.router.get('/', this.getAll);
        this.router.get('/:id', this.getOne);
        this.router.post('/', this.createOne);
        this.router.post('/:id', this.updateOne);
        //TODO this.router.post('/:id', this.getOne);
    }
}
exports.MedicosRouter = MedicosRouter;
// Create the HeroRouter, and export its configured Express.Router
const medicosRouter = new MedicosRouter();
medicosRouter.init();
exports.default = medicosRouter.router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvbWVkaWNvcy5yb3V0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdGQUEwRTtBQUUxRSxxQ0FBZ0U7QUFDaEUsaURBQWlEO0FBQ2pELHFDQUFpQztBQUNqQyxnQ0FBZ0M7QUFFaEM7SUFHRTs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBTSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0I7UUFDM0QsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQywwQ0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUMsT0FBc0I7WUFDMUYsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDO2dCQUNMLE1BQU0sR0FBRyxDQUFDO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQ2hFLElBQUksYUFBYSxHQUFHLEVBQUMsU0FBUyxFQUFDLElBQUksSUFBSSxFQUFFLEVBQUMsaUJBQWlCLEVBQUMsSUFBSSxFQUFDLENBQUM7UUFDbEUsSUFBSSxNQUFNLEdBQVcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFFLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsMENBQWtCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFDLENBQUMsR0FBRyxFQUFDLE1BQU07WUFDckUsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFDSixNQUFNLEdBQUcsQ0FBQztZQUNkLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFVLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFQTs7TUFFRTtJQUNJLE1BQU0sQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzQixRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLDBDQUFrQixDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsR0FBRyxFQUFDLGtCQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUMsR0FBRyxFQUFDLE1BQWM7WUFDM0gsRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDO2dCQUNMLE1BQU0sR0FBRyxDQUFDO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFJRDs7T0FFRztJQUNJLFNBQVMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO1FBQzlELDZGQUE2RjtRQUM3RixJQUFJLGFBQWEsR0FBRyxFQUFDLGlCQUFpQixFQUFDLElBQUksSUFBSSxFQUFFLEVBQUMsQ0FBQztRQUNuRCxJQUFJLE1BQU0sR0FBVyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUMsS0FBSyxDQUFDLEVBQUMsYUFBYSxDQUFDLENBQUM7UUFDNUUsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFVBQVUsQ0FBQywwQ0FBa0IsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEVBQUMsR0FBRyxFQUFDLGtCQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBQyxFQUFDLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxFQUFDLENBQUMsR0FBRyxFQUFDLE1BQU07WUFDeEksRUFBRSxDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQztnQkFDSixNQUFNLEdBQUcsQ0FBQztZQUNkLENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxDQUFVLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUVMLENBQUM7SUFFRDs7O09BR0c7SUFDSCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6Qyw2Q0FBNkM7SUFFL0MsQ0FBQztDQUVGO0FBbEZELHNDQWtGQztBQUVELGtFQUFrRTtBQUNsRSxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQzFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUVyQixrQkFBZSxhQUFhLENBQUMsTUFBTSxDQUFDIiwiZmlsZSI6InJvdXRlcy9tZWRpY29zLnJvdXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTUVESUNPU19DT0xMRUNUSU9OIH0gZnJvbSAnLi8uLi9jb25zdGFudHMvY29sbGVjdGlvbnMuY29uc3RhbnRzJztcclxuaW1wb3J0IHsgSU1lZGljbyB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcy9tZWRpY28uaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7Um91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9ufSBmcm9tICdleHByZXNzJztcclxuaW1wb3J0ICogYXMgZGF0YWJhc2UgZnJvbSBcIi4uL2RhdGFiYXNlL2RhdGFiYXNlXCI7XHJcbmltcG9ydCB7T2JqZWN0SUR9IGZyb20gXCJtb25nb2RiXCI7XHJcbmltcG9ydCAqIGFzIF8gZnJvbSBcInVuZGVyc2NvcmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNZWRpY29zUm91dGVyIHtcclxuICBwdWJsaWMgcm91dGVyOiBSb3V0ZXJcclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgTWVkaWNvc1JvdXRlclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yb3V0ZXIgPSBSb3V0ZXIoKTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR0VUIGFsbCBNZWRpY29zLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBbGwocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICAgIGRhdGFiYXNlLmdldERCKCkuY29sbGVjdGlvbihNRURJQ09TX0NPTExFQ1RJT04pLmZpbmQoe30pLnRvQXJyYXkoKGVycixtZWRpY29zOkFycmF5PElNZWRpY28+KT0+e1xyXG4gICAgICBpZihlcnIpXHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICByZXMuanNvbihtZWRpY29zKTtcclxuICAgIH0pOyAgXHJcbiAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdFVCBhbGwgTWVkaWNvcy5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlT25lKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcbiAgbGV0IGF1ZGl0b3JpYUluZm8gPSB7ZmVjaGFBbHRhOm5ldyBEYXRlKCksZmVjaGFNb2RpZmljYWNpb246bnVsbH07XHJcbiAgbGV0IGVudGl0eTpJTWVkaWNvID0gT2JqZWN0LmFzc2lnbih7fSxfLm9taXQocmVxLmJvZHksJ19pZCcpLGF1ZGl0b3JpYUluZm8pO1xyXG4gICAgZGF0YWJhc2UuZ2V0REIoKS5jb2xsZWN0aW9uKE1FRElDT1NfQ09MTEVDVElPTikuaW5zZXJ0KGVudGl0eSwoZXJyLHJlc3VsdCk9PntcclxuICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcy5zZW5kKDxJTWVkaWNvPnJlc3VsdC5vcHNbMF0pO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgIC8qKlxyXG4gICAqIEdFVCBhbGwgTWVkaWNvcy5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0T25lKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSB7XHJcbiAgICBjb25zb2xlLmxvZyhyZXEucGFyYW1zLmlkKTtcclxuICAgIGRhdGFiYXNlLmdldERCKCkuY29sbGVjdGlvbihNRURJQ09TX0NPTExFQ1RJT04pLmZpbmRPbmUoe19pZDpPYmplY3RJRC5jcmVhdGVGcm9tSGV4U3RyaW5nKHJlcS5wYXJhbXMuaWQpfSwoZXJyLG1lZGljbzpJTWVkaWNvKT0+e1xyXG4gICAgICBpZihlcnIpXHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICByZXMuanNvbihtZWRpY28pO1xyXG4gICAgfSk7ICBcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgXHJcblxyXG4gIC8qKlxyXG4gICAqIFVQREFURSBzaW5nbGUgTWVkaWNvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVPbmUocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pIHtcclxuICAgIC8vd2hlbiB1cGRhdGluZyB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgaWQgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBpbiBvcmRlciB0byBtYWtlIGl0IGlubXV0YWJsZVxyXG4gICAgbGV0IGF1ZGl0b3JpYUluZm8gPSB7ZmVjaGFNb2RpZmljYWNpb246bmV3IERhdGUoKX07XHJcbiAgICBsZXQgZW50aXR5OklNZWRpY28gPSBPYmplY3QuYXNzaWduKHt9LF8ub21pdChyZXEuYm9keSwnX2lkJyksYXVkaXRvcmlhSW5mbyk7XHJcbiAgICBkYXRhYmFzZS5nZXREQigpLmNvbGxlY3Rpb24oTUVESUNPU19DT0xMRUNUSU9OKS5maW5kT25lQW5kVXBkYXRlKHtfaWQ6T2JqZWN0SUQuY3JlYXRlRnJvbUhleFN0cmluZyhyZXEucGFyYW1zLmlkKX0seyRzZXQ6ZW50aXR5fSwoZXJyLHJlc3VsdCk9PntcclxuICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcy5zZW5kKDxJTWVkaWNvPnJlc3VsdC52YWx1ZSk7XHJcbiAgICB9KTsgIFxyXG4gICAgXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUYWtlIGVhY2ggaGFuZGxlciwgYW5kIGF0dGFjaCB0byBvbmUgb2YgdGhlIEV4cHJlc3MuUm91dGVyJ3NcclxuICAgKiBlbmRwb2ludHMuXHJcbiAgICovXHJcbiAgaW5pdCgpIHtcclxuICAgIHRoaXMucm91dGVyLmdldCgnLycsIHRoaXMuZ2V0QWxsKTtcclxuICAgIHRoaXMucm91dGVyLmdldCgnLzppZCcsIHRoaXMuZ2V0T25lKTtcclxuICAgIHRoaXMucm91dGVyLnBvc3QoJy8nLCB0aGlzLmNyZWF0ZU9uZSk7XHJcbiAgICB0aGlzLnJvdXRlci5wb3N0KCcvOmlkJywgdGhpcy51cGRhdGVPbmUpO1xyXG4gICAgLy9UT0RPIHRoaXMucm91dGVyLnBvc3QoJy86aWQnLCB0aGlzLmdldE9uZSk7XHJcbiAgICBcclxuICB9XHJcblxyXG59XHJcblxyXG4vLyBDcmVhdGUgdGhlIEhlcm9Sb3V0ZXIsIGFuZCBleHBvcnQgaXRzIGNvbmZpZ3VyZWQgRXhwcmVzcy5Sb3V0ZXJcclxuY29uc3QgbWVkaWNvc1JvdXRlciA9IG5ldyBNZWRpY29zUm91dGVyKCk7XHJcbm1lZGljb3NSb3V0ZXIuaW5pdCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWVkaWNvc1JvdXRlci5yb3V0ZXI7Il0sInNvdXJjZVJvb3QiOiIuLiJ9
